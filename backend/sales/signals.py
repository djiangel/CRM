
from channels.layers import get_channel_layer
from asgiref.sync import async_to_sync
from django.db.models.signals import post_save ,  m2m_changed , pre_save
from .models import *
from django.contrib.auth.models import User
import django.dispatch
from django.core.mail import send_mail
from django.dispatch import receiver

def ChannelNotification(sender, instance, created, **kwargs):
    if created:
        channel_layer = get_channel_layer()
        group_name = "notifications_{}".format(instance.target)
        async_to_sync(channel_layer.group_send)(
            group_name, {
                "type": "user.notification",
                "id": instance.pk,
                "title": instance.title,
                "datetime": str(instance.datetime),
                "read": instance.read,
                "extra": instance.extra,
                "object_url": instance.object_url,
            }
        )
        if NotificationBooleanChecker(instance.extra,instance.target,instance.action):
            send_mail('NOBO CRM Notification',
            str(instance.title) + ' Do not reply , this is an autogenerated message',
            'dionneo123@gmail.com',
            ['dionneo123@gmail.com'],
            fail_silently=False)


post_save.connect(ChannelNotification, sender=Notifications)


def NotificationBooleanChecker(notification_type,target,action):
    if action == 'created':
        return{
            'Sales Project' : target.userprofile.project_created,
            'Requirements' : target.userprofile.requirements_created,
            'Quotations':target.userprofile.quotations_created,
            'Notations':target.userprofile.notations_created,
            'Ticket':target.userprofile.ticket_created,
            'Customer':target.userprofile.customer_created,
            'Vendor':target.userprofile.vendor_created,
            'Approval': target.userprofile.approval_created,
            'Transition': target.userprofile.transition_created,
            'Automation': target.userprofile.automation_created,
            }.get(notification_type,False)
    elif action == 'updated':
        return{
            'Sales Project' : target.userprofile.project_updated,
            'Requirements' : target.userprofile.requirements_updated,
            'Quotations':target.userprofile.quotations_updated,
            'Notations':target.userprofile.notations_updated,

            'Ticket':target.userprofile.ticket_updated,
            'Customer':target.userprofile.customer_updated,
            'Vendor':target.userprofile.vendor_updated,
            }.get(notification_type,False)

    elif action == 'approved':

        return{
            'Sales Project' : target.userprofile.project_approvals,
            'Ticket':target.userprofile.ticket_approved,
            'Customer':target.userprofile.customer_approved,
            'Vendor':target.userprofile.vendor_approved,
            }.get(notification_type,False)
    
    elif action == 'deleted':
        return{
            'Requirements' : target.userprofile.requirements_deleted,
            'Quotations':target.userprofile.quotations_deleted,
            'Notations':target.userprofile.notations_deleted,
            }.get(notification_type,False)
    
    else:
        return{
            'Approvals' : target.userprofile.approval_reordered,
            }.get(notification_type,False)
        
#this is to create a userprofile is a user is created
@receiver(post_save, sender=User)
def create_or_update_user_profile(sender, instance, created, **kwargs):
    if created:
        UserProfile.objects.create(user=instance)
    instance.userprofile.save()

